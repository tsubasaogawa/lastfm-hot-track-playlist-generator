package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/tsubasaogawa/lastfm-hot-track-playlist-generator/lastfm"
	"github.com/tsubasaogawa/lastfm-hot-track-playlist-generator/ytmusic"
)

func main() {
	var (
		user          = flag.String("user", "", "Last.fm user name")
		title         = flag.String("title", "Last.fm Hot Tracks", "YouTube (Music) playlist title")
		desc          = flag.String("description", "Generated by lastfm-hot-track-playlist-generator", "YouTube (Music) playlist description")
		privacy       = flag.String("privacy", "private", "YouTube (Music) playlist privacy")
		from          = flag.String("fromdate", "2023-01-01T00:00:00+09:00", "Last.fm target from date")
		to            = flag.String("todate", "2023-01-07T23:59:59+09:00", "Last.fm target to date")
		duplicate     = flag.Bool("duplicate", false, "Allow duplicate playlists with the same title")
		region        = flag.String("region", "JP", "Region code used in YouTube (Music) search")
		lfmMaxResults = flag.Int("lfmmax", 20, "Max results for Last.fm response")
		ytmMaxResults = flag.Int64("ytmmax", 3, "Max results for YouTube (Music) response")
		maxSearch     = flag.Int("maxsearch", 1, "Threshold tries to search an art track video")
		dryrun        = flag.Bool("dryrun", false, "Do not generate a playlist but fetch a weekly chart")
	)
	flag.Parse()

	if *user == "" {
		log.Fatalln("user is required")
	}

	args := flag.Args()
	if len(args) != 1 || args[0] == "" {
		log.Fatalln("Give the client secret json file as an argument")
	}
	secretJsonFile := args[0]

	tracks, err := lastfm.GetTracks(
		*user,
		os.Getenv("LASTFM_API_KEY"),
		str2unixtime(*from),
		str2unixtime(*to),
		*lfmMaxResults,
	)
	if len(tracks) < 1 {
		err = fmt.Errorf("No tracks found in given date range")
	}
	if err != nil {
		log.Fatalln(err)
	}
	if *dryrun {
		for _, tr := range tracks {
			tr.Print()
			print("\n")
		}
		os.Exit(0)
	}

	service, err := ytmusic.NewService(secretJsonFile)
	if err != nil {
		log.Fatalln(err)
	}

	playlist, err := ytmusic.NewPlaylist(service, *title, *desc, *privacy, *duplicate, *ytmMaxResults)
	if err != nil {
		log.Fatalln(err)
	}

	search := ytmusic.NewSearch(service)
	search.RegionCode = *region
	search.MaxTries = *maxSearch
	for _, track := range tracks {
		track.Print()
		search.Q = fmt.Sprintf("%s - %s", track.ArtistName, track.Name)
		searchItem, err := search.Do()
		if err != nil {
			log.Fatalln(err)
		}
		fmt.Printf("\râœ” %s - %s (%d times; id=%s)\n", searchItem.Title, searchItem.Artist, track.Playcount, searchItem.Id)
		err = playlist.AddItem(searchItem)
		if err != nil {
			log.Fatalln(err)
		}
	}
}

func str2unixtime(date string) int64 {
	parsed, err := time.Parse("2006-01-02T15:04:05Z07:00", date)
	if err != nil {
		log.Fatalln(err)
	}

	return parsed.Unix()
}
